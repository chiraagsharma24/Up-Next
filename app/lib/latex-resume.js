/**
 * Functions to generate LaTeX resume content from user data
 */

/**
 * Converts a date string in YYYY-MM format to MM/YYYY format
 * @param {string} dateString - Date in YYYY-MM format
 * @returns {string} - Date in MM/YYYY format
 */
export function formatDateForLatex(dateString) {
  if (!dateString) return "";
  const [year, month] = dateString.split("-");
  return `${month}/${year}`;
}

/**
 * Generates LaTeX content for contact information
 * @param {Object} contactInfo - Contact information object
 * @returns {string} - LaTeX formatted contact information
 */
export function generateContactLatex(contactInfo) {
  if (!contactInfo) return "";
  
  const { email, mobile, linkedin, twitter } = contactInfo;
  
  return `
  \\begin{center}
    \\textbf{\\LARGE\\scshape ${contactInfo.name || "Your Name"}} \\\\
    \\vspace{1pt}\\small
    ${email ? `\\href{mailto:${email}}{${email}}` : ""}
    ${email && mobile ? `$\\ \\diamond\\ $` : ""}
    ${mobile ? `${mobile}` : ""}
    ${(email || mobile) && linkedin ? `$\\ \\diamond\\ $` : ""}
    ${linkedin ? `\\href{${linkedin}}{LinkedIn}` : ""}
    ${(email || mobile || linkedin) && twitter ? `$\\ \\diamond\\ $` : ""}
    ${twitter ? `\\href{${twitter}}{Twitter}` : ""}
  \\end{center}
  `;
}

/**
 * Generates LaTeX content for a section of entries (experience, education, etc.)
 * @param {Array} entries - Array of entry objects
 * @param {string} sectionTitle - Title of the section
 * @returns {string} - LaTeX formatted section
 */
export function generateEntriesLatex(entries, sectionTitle) {
  if (!entries || entries.length === 0) return "";
  
  let latex = `\\section{${sectionTitle}}\n\\cvheadingstart\n`;
  
  entries.forEach(entry => {
    const startDate = formatDateForLatex(entry.startDate);
    const endDate = entry.current ? "Present" : formatDateForLatex(entry.endDate);
    
    latex += `
  \\cvheading
    {${entry.organization}}{${entry.location || "Location"}}
    {${entry.title}}{${startDate} - ${endDate}}
  \\cvitemstart
    ${entry.description.split('\n').map(line => `\\cvitem{${line}}`).join('\n    ')}
  \\cvitemend
    `;
  });
  
  latex += `\\cvheadingend\n`;
  
  return latex;
}

/**
 * Generates LaTeX content for skills
 * @param {string} skills - Comma-separated skills string
 * @returns {string} - LaTeX formatted skills section
 */
export function generateSkillsLatex(skills) {
  if (!skills) return "";
  
  const skillsList = skills.split(',').map(skill => skill.trim()).filter(Boolean);
  
  let latex = `\\section{Technical Skills}\n`;
  
  // Group skills into categories if possible
  const categorizedSkills = {};
  
  skillsList.forEach(skill => {
    // Simple categorization logic - can be enhanced
    if (skill.toLowerCase().includes('javascript') || 
        skill.toLowerCase().includes('react') || 
        skill.toLowerCase().includes('node') || 
        skill.toLowerCase().includes('web')) {
      categorizedSkills['Web Development'] = categorizedSkills['Web Development'] || [];
      categorizedSkills['Web Development'].push(skill);
    } else if (skill.toLowerCase().includes('python') || 
               skill.toLowerCase().includes('java') || 
               skill.toLowerCase().includes('c++') || 
               skill.toLowerCase().includes('programming')) {
      categorizedSkills['Programming'] = categorizedSkills['Programming'] || [];
      categorizedSkills['Programming'].push(skill);
    } else if (skill.toLowerCase().includes('data') || 
               skill.toLowerCase().includes('analytics') || 
               skill.toLowerCase().includes('sql')) {
      categorizedSkills['Data'] = categorizedSkills['Data'] || [];
      categorizedSkills['Data'].push(skill);
    } else {
      categorizedSkills['Other'] = categorizedSkills['Other'] || [];
      categorizedSkills['Other'].push(skill);
    }
  });
  
  // If we have categories, use them
  if (Object.keys(categorizedSkills).length > 0) {
    Object.entries(categorizedSkills).forEach(([category, skills]) => {
      latex += `\\cvskill{${category}}{${Math.min(5, Math.ceil(skills.length / 2))}}\n`;
    });
  } else {
    // Otherwise, just list all skills with a default rating
    skillsList.forEach(skill => {
      latex += `\\cvskill{${skill}}{3}\n`;
    });
  }
  
  latex += `\\vspace{-5pt}\n`;
  
  return latex;
}

/**
 * Generates the complete LaTeX resume document
 * @param {Object} resumeData - Resume data object
 * @returns {string} - Complete LaTeX document
 */
export function generateLatexResume(resumeData) {
  if (!resumeData) return "";
  
  const { contactInfo, summary, skills, experience, education, projects } = resumeData;
  
  // Start with the LaTeX template header
  let latex = `%------------------------
% Resume Generated by Up-Next
%------------------------
\\documentclass[letterpaper,11pt]{article}

\\usepackage{latexsym}
\\usepackage[empty]{fullpage}
\\usepackage{titlesec}
\\usepackage{marvosym}
\\usepackage[usenames,dvipsnames]{color}
\\usepackage{verbatim}
\\usepackage{enumitem}
\\usepackage[hidelinks]{hyperref}
\\usepackage{fancyhdr}
\\usepackage[english]{babel}
\\usepackage{tabularx}
\\usepackage{fontawesome5}
\\usepackage{ragged2e}
\\usepackage{etoolbox}
\\usepackage{tikz}
\\input{glyphtounicode}

% font options
\\usepackage{newpxtext}
\\linespread{1.05}  % palladio needs more leading (space between lines)
\\usepackage[T1]{fontenc}

\\pagestyle{fancy}
\\fancyhf{}  % clear all header and footer fields
\\fancyfoot{}
\\renewcommand{\\headrulewidth}{0pt}
\\renewcommand{\\footrulewidth}{0pt}

% adjust margins
\\addtolength{\\oddsidemargin}{-0.5in}
\\addtolength{\\evensidemargin}{-0.5in}
\\addtolength{\\textwidth}{1in}
\\addtolength{\\topmargin}{-.5in}
\\addtolength{\\textheight}{1.0in}

\\urlstyle{same}

\\raggedbottom
\\raggedright
\\setlength{\\tabcolsep}{0in}
\\setlength{\\footskip}{5pt}

% sections formatting
\\titleformat{\\section}{
  \\vspace{-2pt}\\scshape\\raggedright\\large
}{}{0em}{}[\\color{black}\\titlerule\\vspace{-5pt}]

% ensure that generate pdf is machine readable/ATS parsable
\\pdfgentounicode=1

% custom commands
\\newcommand{\\cvitem}[1]{
  \\item\\small{
    {#1\\vspace{-2pt}}
  }
}

\\newcommand{\\cvheading}[4]{
  \\vspace{-2pt}\\item
    \\begin{tabular*}{\\textwidth}[t]{l@{\\extracolsep{\\fill}}r}
      \\textbf{#1} & #2 \\\\
      \\small#3 & \\small #4 \\\\
    \\end{tabular*}\\vspace{-7pt}
}

\\newcommand{\\cvheadingstart}{\\begin{itemize}[leftmargin=0in, label={}]}
\\newcommand{\\cvheadingend}{\\end{itemize}}
\\newcommand{\\cvitemstart}{\\begin{itemize}\\justifying}
\\newcommand{\\cvitemend}{\\end{itemize}\\vspace{-5pt}}

\\newcommand{\\cvskill}[2]{
  \\textcolor{black}{\\textbf{#1}}\\hfill
  \\foreach \\x in {1,...,5}{%
    \\space{\\ifnumgreater{\\x}{#2}{\\color{black!80!white!20}}{\\color{black}}\\faSquare}}\\par%
  \\vspace{-2pt}
}

\\renewcommand\\labelitemii{$\\vcenter{\\hbox{\\footnotesize$\\bullet$}}$}

\\begin{document}

`;
  
  // Add contact information
  latex += generateContactLatex(contactInfo);
  
  // Add professional summary if available
  if (summary) {
    latex += `
\\section{Professional Summary}
\\cvheadingstart
\\item
\\cvitemstart
  \\cvitem{${summary}}
\\cvitemend
\\cvheadingend
`;
  }
  
  // Add experience section
  if (experience && experience.length > 0) {
    latex += generateEntriesLatex(experience, "Professional Experience");
  }
  
  // Add education section
  if (education && education.length > 0) {
    latex += generateEntriesLatex(education, "Education");
  }
  
  // Add projects section if available
  if (projects && projects.length > 0) {
    latex += generateEntriesLatex(projects, "Projects");
  }
  
  // Add skills section
  if (skills) {
    latex += generateSkillsLatex(skills);
  }
  
  // Add misc section if needed
  latex += `
\\section{Misc.}
\\cvheadingstart
\\item
\\cvitemstart
  \\cvitem{Generated with Up-Next Resume Builder}
\\cvitemend
\\cvheadingend

\\end{document}
`;
  
  return latex;
} 