generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?    // Combined industry-subindustry (e.g., "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Enhanced Profile fields
  bio           String?
  experience    Int?      // Years of experience
  education     Education[]
  skills        Skill[]
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
  jobApplications JobApplication[]
  interviewSessions InterviewSession[]
  careerGoals   CareerGoal[]
  linkedinProfile LinkedInProfile?
  learningPath  LearningPath?
}

model Education {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  gpa         Float?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model Skill {
  id          String    @id @default(cuid())
  name        String
  level       Int       // 1-5 scale
  category    String    // Technical, Soft, Domain-specific
  verified    Boolean   @default(false)
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name])
}

model JobApplication {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  company       String
  position      String
  status        String    // Applied, Interview, Offer, Rejected
  source        String    // LinkedIn, Company Website, etc.
  appliedDate   DateTime
  jobUrl        String?
  description   String?   @db.Text
  notes         String?   @db.Text
  interviews    Interview[]
  nextAction    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Interview {
  id            String    @id @default(cuid())
  jobApplicationId String
  jobApplication JobApplication @relation(fields: [jobApplicationId], references: [id])
  type          String    // Phone, Technical, Behavioral
  scheduledAt   DateTime
  duration      Int       // in minutes
  interviewer   String?
  notes         String?   @db.Text
  feedback      String?   @db.Text
  status        String    // Scheduled, Completed, Cancelled
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([jobApplicationId])
}

model InterviewSession {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          String    // Mock, Real
  category      String    // Technical, Behavioral
  questions     Json[]    // Array of {question, answer, feedback}
  score         Float?
  feedback      String?   @db.Text
  recordingUrl  String?
  transcript    String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model CareerGoal {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  title         String
  description   String    @db.Text
  targetDate    DateTime?
  status        String    // Active, Completed, Abandoned
  milestones    Json[]    // Array of {title, description, completed}
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model LinkedInProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  profileUrl    String
  headline      String?
  summary       String?   @db.Text
  connectionCount Int?
  lastSynced    DateTime?
  optimizationScore Float?
  suggestions   Json[]    // Array of optimization suggestions
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model LearningPath {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  targetRole    String
  currentLevel  Int       // 1-5 scale
  targetLevel   Int       // 1-5 scale
  resources     Json[]    // Array of {type, title, url, completed}
  estimatedCompletion DateTime?
  progress      Float     // 0-100
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     // Overall quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique    // One resume per user
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // Markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   String    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook String    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}